Title: REST API
----

Text:

Zammad is a web based open source helpdesk/ticket system with many features
to manage customer communication via several channels like telephone, facebook,
twitter, chat and e-mails.

## Introduction
This chapter describes the Zammad API v1.

## The API

The API is a REST/JSON API. Endpoints are documented with the HTTP method for the request and a partial resource.

Example:

```
GET /api/v1/users
```

The full url looks like:

```
https://your_zammad/api/v1/users
```

Curly braces, {}, indicate values you have to supply for the url.

Example:

```
GET  /api/v1/users/{id}
```


## Authenication
Zammad supports 3 different authentication methods for the Zammad API.


### HTTP Basic Authentication (username/password)
The username/password provided as http header in the http call. The Zammad admin can enable/disable his authentication method in the admin interface. Read more about HTTP Basic Autentication [here](https://en.wikipedia.org/wiki/Basic_access_authentication).

Example:

```
curl -u {username}:{password} https://your_zammad/api/v1/users
```


### HTTP Token Authentication (Access Token)
The access token provided as http header in the http call. Each user need to create it's own access token in user preferences. The Zammad admin can enable/disable his authentication method in the admin interface.

Example:

```
curl -H "Authorization: Token token={your_token}" https://your_zammad/api/v1/users
```


### OAuth2 (Token Access)

The Zammad API supports OAuth2 authorization. In order to create OAuth2 tokens by an external application, the Zammad needs to create an Application in admin interface first. In your requests, specify the access token in an authorization header as follows:

Example:

```
curl -H "Authorization: Bearer {your_token}" https://your_zammad/api/v1/users
```


## Request Format
The Zammad API is a JSON API, so you need to set a "Content-Type: application/json" in each http call. If you do not so, you will get and text/html response.

Example:

```
POST /api/v1/users/{id} HTTP/1.1
Content-Type: application/json

{
  "name":"some name",
  "organization_id": 123,
  "note":"some note"
}

```

## Response Format
If an response is successful, a HTTP status codes in the 200 or 300 range is returned. If a item got created or updated the all new attributes will be returned (also server site generated attributes like created_at and updated_at).
